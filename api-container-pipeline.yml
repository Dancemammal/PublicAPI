# Docker 
# Build and push and image to the container registry

trigger:
  branches:
    include:
      - master
      - dev
  paths:
    exclude:
      - infrastructure/
pr:
  - master
  - dev

parameters:
  - name: DeployBranches
    displayName: Branches that should be deployed
    type: object
    default:
      - master
      - dev
  - name: resourceGroupName
    displayName: Resource Group Name
    type: string
    default: 'dfe-development'
  - name: azureServiceConnection
    displayName: The current Azure ACR service connection 
    type: string
    default: 'ACRServiceConnection'
  - name: containerRegistryName
    displayName: The container registry to push the image to
    type: string
    default: 's101eescrpublicapi.azurecr.io'

variables:
  BuildConfiguration: 'Release'
  IsBranchDeployable: ${{ containsValue(parameters.DeployBranches, variables['Build.SourceBranchName']) }}
  CI: true
  isDev: $[eq(variables['Build.SourceBranch'], 'refs/heads/dev')]
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  dockerRegistryServiceConnection: ${{parameters.azureServiceConnection}}
  imageRepository: 'publicapi'
  dockerfilePath: '/docker/public-api/DockerFile'
  tag: '$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


jobs:
  - job: 'API_Backend'
    pool:
      vmImage: $(vmImageName)
    workspace:
      clean: all
    steps:
      - task: UseDotNet@2
        displayName: 'Install .NET 8.0 SDK'
        inputs:
          version: 8.0.x
          performMultiLevelLookup: true

      - task: 'DotNetCoreCLI@2'
        displayName: 'Restore'
        inputs:
          command: 'restore'
          projects: '**/GovUk.Education.ExploreEducationStatistics.Public.Data.Api.csproj'
          feedsToUse: config
          nugetConfigPath: src/nuget.config

      - task: 'DotNetCoreCLI@2'
        displayName: 'Build'
        inputs:
          projects: '**/GovUk.*/GovUk.Education.ExploreEducationStatistics.Public.Data.Api.csproj'
          arguments: '--configuration $(BuildConfiguration)'

      - task: 'DotNetCoreCLI@2'
        displayName: 'Test'
        inputs:
          command: 'test'
          projects: '**/GovUk.*[Tt]ests/GovUk.Education.ExploreEducationStatistics.Public.Data.Api.csproj'
          arguments: '--configuration $(BuildConfiguration)'

      - task: 'DotNetCoreCLI@2'
        displayName: 'Publish Public Data API'
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: '**/GovUk.Education.ExploreEducationStatistics.Public.Data.Api.csproj'
          arguments: '--self-contained true -r win-x64 --configuration $(BuildConfiguration) --output public_data_api'
          zipAfterPublish: false

  - job: Build_API_container
    displayName: Build Public Data API Docker Image
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DockerInstaller@0
      inputs:
        dockerVersion: '17.09.0-ce'

    - task: Docker@2
      displayName: Build public ai container app image 
      condition: eq(variables.IsBranchDeployable, true)
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)
        command: 'build'
        Dockerfile: $(dockerfilePath)
        buildContext: '$(System.DefaultWorkingDirectory)'
        tags: $(Build.BuildNumber)
        arguments: '--build-arg BUILD_BUILDNUMBER=$(Build.BuildNumber)'

    - task: Docker@2
      displayName: 'Push public api container app image '
      condition: eq(variables.IsBranchDeployable, true)
      inputs:
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository)
        command: 'push'
        Dockerfile: $(dockerfilePath)
        buildContext: '$(System.DefaultWorkingDirectory)'
        tags: $(Build.BuildNumber)